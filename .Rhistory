#Forecasting using auto arima model
data_forecasts=forecast::forecast(model_autoarima,h=h)
par(mfrow=c(1,1))
plot(data_forecasts)
data_forecasts
}
#SGD_min
x<-stats::rnorm(1,0,100);N<-2000
alpha<-0.005;coefficient<-c(1,3);powers<-c(2,4)
x_last<-SGD_min(x,alpha,N,coefficient,powers)
paste("The x corresponding to the function value is",x_last)
#Arima_forecast
path<-"D:\\Code\\R_HW\\Californa_Wine_Production.xlsx"
start <- 1980
end <- 2020
h<-36
Arima_forecast(start,end,h,path)
#maxPoints
points<-matrix(c(1,1,2,2,3,3),3,2,byrow = TRUE)
maxPoints(points)
library(readxl)
path<-"D:\\Code\\R_HW\\Californa_Wine_Production.xlsx"
data<-readxl::read_excel(path)
View(data)
usethis::use_data(data)
Arima_forecast <- function(start,end,h,path=0) {
#Implementing time series forecasting using Auto ARIMA method
# Dataset contains Californa_Wine_Production from 1980 to 2020
# library(readxl)
if (path) {
data<-readxl::read_excel(path)
}
else{
data(data)
}
data<-data['Production']
utils::str(data)
#We do not divide into test and train data.Hence not computing Error  metrics
#This code just shows the implementation of Auto arima in R
#Converting data to time series
# library(stats)
data_ts=stats::ts(data, frequency = 1, start = start,end = end)
data_ts
#Plotting time series
graphics::par(mfrow=c(1,1))
plot(data_ts)
#ACF and PACF of data
graphics::par(mfrow=c(1,3))
stats::plot.ts(data_ts)
stats::acf(data_ts, lag.max=10)
stats::pacf(data_ts, lag.max=10)
# Build time series model using auto.arima
# library(forecast)
model_autoarima= forecast::auto.arima(data_ts,ic='aic')
model_autoarima
#Forecasting using auto arima model
data_forecasts=forecast::forecast(model_autoarima,h=h)
par(mfrow=c(1,1))
plot(data_forecasts)
data_forecasts
}
#SGD_min
x<-stats::rnorm(1,0,100);N<-2000
alpha<-0.005;coefficient<-c(1,3);powers<-c(2,4)
x_last<-SGD_min(x,alpha,N,coefficient,powers)
paste("The x corresponding to the function value is",x_last)
#Arima_forecast
# path<-"D:\\Code\\R_HW\\Californa_Wine_Production.xlsx"
start <- 1980
end <- 2020
h<-36
Arima_forecast(start,end,h)
#maxPoints
points<-matrix(c(1,1,2,2,3,3),3,2,byrow = TRUE)
maxPoints(points)
Arima_forecast <- function(start,end,h,path=0) {
#Implementing time series forecasting using Auto ARIMA method
# Dataset contains Californa_Wine_Production from 1980 to 2020
# library(readxl)
if (path) {
data<-readxl::read_excel(path)
}
else{
data<-data(data)
}
data<-data['Production']
utils::str(data)
#We do not divide into test and train data.Hence not computing Error  metrics
#This code just shows the implementation of Auto arima in R
#Converting data to time series
# library(stats)
data_ts=stats::ts(data, frequency = 1, start = start,end = end)
data_ts
#Plotting time series
graphics::par(mfrow=c(1,1))
plot(data_ts)
#ACF and PACF of data
graphics::par(mfrow=c(1,3))
stats::plot.ts(data_ts)
stats::acf(data_ts, lag.max=10)
stats::pacf(data_ts, lag.max=10)
# Build time series model using auto.arima
# library(forecast)
model_autoarima= forecast::auto.arima(data_ts,ic='aic')
model_autoarima
#Forecasting using auto arima model
data_forecasts=forecast::forecast(model_autoarima,h=h)
par(mfrow=c(1,1))
plot(data_forecasts)
data_forecasts
}
#SGD_min
x<-stats::rnorm(1,0,100);N<-2000
alpha<-0.005;coefficient<-c(1,3);powers<-c(2,4)
x_last<-SGD_min(x,alpha,N,coefficient,powers)
paste("The x corresponding to the function value is",x_last)
#Arima_forecast
# path<-"D:\\Code\\R_HW\\Californa_Wine_Production.xlsx"
start <- 1980
end <- 2020
h<-36
Arima_forecast(start,end,h)
Arima_forecast <- function(start,end,h,path=0) {
#Implementing time series forecasting using Auto ARIMA method
# Dataset contains Californa_Wine_Production from 1980 to 2020
# library(readxl)
if (path) {
data<-readxl::read_excel(path)
}
else{
data(data)
}
data<-data['Production']
utils::str(data)
#We do not divide into test and train data.Hence not computing Error  metrics
#This code just shows the implementation of Auto arima in R
#Converting data to time series
# library(stats)
data_ts=stats::ts(data, frequency = 1, start = start,end = end)
data_ts
#Plotting time series
graphics::par(mfrow=c(1,1))
plot(data_ts)
#ACF and PACF of data
graphics::par(mfrow=c(1,3))
stats::plot.ts(data_ts)
stats::acf(data_ts, lag.max=10)
stats::pacf(data_ts, lag.max=10)
# Build time series model using auto.arima
# library(forecast)
model_autoarima= forecast::auto.arima(data_ts,ic='aic')
model_autoarima
#Forecasting using auto arima model
data_forecasts=forecast::forecast(model_autoarima,h=h)
par(mfrow=c(1,1))
plot(data_forecasts)
data_forecasts
}
#SGD_min
x<-stats::rnorm(1,0,100);N<-2000
alpha<-0.005;coefficient<-c(1,3);powers<-c(2,4)
x_last<-SGD_min(x,alpha,N,coefficient,powers)
paste("The x corresponding to the function value is",x_last)
#Arima_forecast
# path<-"D:\\Code\\R_HW\\Californa_Wine_Production.xlsx"
start <- 1980
end <- 2020
h<-36
Arima_forecast(start,end,h)
#maxPoints
points<-matrix(c(1,1,2,2,3,3),3,2,byrow = TRUE)
maxPoints(points)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../StatComp22032_1.0.tar.gz',repo=NULL)
devtools::install_github("1183038359/StatComp22032",build_vignettes = TRUE, force=T)
devtools::install_github("1183038359/StatComp22032",build_vignettes = TRUE, force=T)
install.packages("rlang")
devtools::install_github("1183038359/StatComp22032",build_vignettes = TRUE, force=T)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove. packages('rlang')
remove.packages('rlang')
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("1183038359/StatComp22032",build_vignettes = TRUE, force=T)
devtools::install_github("1183038359/StatComp22032",build_vignettes = TRUE, force=T)
devtools::build(vignettes=FALSE)
install.packages('../StatComp22032_1.0.tar.gz',repo=NULL)
library(StatComp22032)
?vctrs
??vctrs
library(vctrs)
install.packages("vctrs")
library(StatComp22032)
library(vctrs)
library(StatComp22032)
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
library(StatComp22032)
points<-matrix(c(1,1,2,2,3,3),3,2,byrow = TRUE)
maxPoints(points)
devtools::document()
devtools::build(vignettes=FALSE)
install.packages('../StatComp22032_1.0.tar.gz',repo=NULL)
install.packages('../StatComp22032_1.0.tar.gz',repo=NULL)
library(StatComp22032)
points<-matrix(c(1,1,2,2,3,3),3,2,byrow = TRUE)
maxPoints(points)
devtools::document()
devtools::build(vignettes=FALSE)
install.packages('../StatComp22032_1.0.tar.gz',repo=NULL)
library(StatComp22032)
points<-matrix(c(1,1,2,2,3,3),3,2,byrow = TRUE)
maxPoints(points)
x<-stats::rnorm(1,0,100);N<-2000
alpha<-0.005;coefficient<-c(1,3);powers<-c(2,4)
x_last<-SGD_min(x,alpha,N,coefficient,powers)
path<-"D:\\Code\\R_HW\\Californa_Wine_Production.xlsx"
start <- 1980
end <- 2020
h<-36
Arima_forecast(path,start,end,h)
devtools::install_github("1183038359/StatComp22032",build_vignettes = TRUE, force=T)
library(Rcpp)
library(StatComp22032)
x<-stats::rnorm(1,0,100);N<-2000
alpha<-0.005;coefficient<-c(1,3);powers<-c(2,4)
x_last<-SGD_min(x,alpha,N,coefficient,powers)
paste("The x corresponding to the function value is",x_last)
points<-matrix(c(1,1,2,2,3,3),3,2,byrow = TRUE)
maxPoints(points)
path<-"D:\\Code\\R_HW\\Californa_Wine_Production.xlsx"
start <- 1980
end <- 2020
h<-36
Arima_forecast(path,start,end,h)
path<-"D:\\Code\\Californa_Wine_Production.xlsx"
start <- 1980
end <- 2020
h<-36
Arima_forecast(path,start,end,h)
start <- 1980
end <- 2020
h<-36
Arima_forecast(path,start,end,h)
start <- 1980
end <- 2020
h<-36
Arima_forecast(start,end,h)
start <- 1980
end <- 2020
h<-36
Arima_forecast(start,end,h,path)
devtools::install_github("tongbowen1999/StatComp22095",build_vignettes = TRUE, force=T)
?Arima_forecast
?StatComp22095
devtools::document()
devtools::document()
devtools::build(vignettes=FALSE)
install.packages('../StatComp22032_1.0.tar.gz',repo=NULL)
install.packages('../StatComp22032_1.0.tar.gz',repo=NULL)
library(StatComp22032)
start <- 1980
end <- 2020
h<-36
Arima_forecast(start,end,h)
View(data)
library(StatComp22032)
> start <- 1980
start <- 1980
end <- 2020
h<-36
Arima_forecast(start,end,h)
devtools::document()
load("D:/Code/R_HW/StatComp22032/data/data.rda")
View(data)
devtools::build(vignettes=FALSE)
devtools::install_github("1183038359/StatComp22032",build_vignettes = TRUE, force=T)
SGD_min <- function(x,alpha,N,coefficient,powers) {
get_G <- function(x,coefficient,powers) {
gradient<-0
for (i in 1:length(coefficient)) {
gradient<-gradient+coefficient[i]*powers[i]*x^(powers[i]-1)
}
print(gradient)
return (gradient)
}
for (i in 1:N) {
if (! is.na(x)){
x<-x-alpha*get_G(x,coefficient,powers)
}
else{
x<-stats::rnorm(1,0,100)
}
}
print("The minimum function value is")
y<-0
for (i in 1:length(coefficient)) {
y<-y+coefficient[i]*x^powers[i]
}
print(y)
#plot the curve
exp_par <- function(x) {
y<-0
len_par<-length(coefficient)
for (i in 1:len_par) {
y<-y+coefficient[i]*x^powers[i]
}
return (y)
}
graphics::curve(exp_par,-20,20)
return(x)
}
#SGD_min
x<-stats::rnorm(1,0,100);N<-2000
alpha<-0.005;coefficient<-c(1,3);powers<-c(2,4)
x_last<-SGD_min(x,alpha,N,coefficient,powers)
paste("The x corresponding to the function value is",x_last)
#Arima_forecast
# path<-"D:\\Code\\R_HW\\Californa_Wine_Production.xlsx"
start <- 1980
end <- 2020
h<-36
Arima_forecast(start,end,h)
#maxPoints
points<-matrix(c(1,1,2,2,3,3),3,2,byrow = TRUE)
maxPoints(points)
#SGD_min
x<-stats::rnorm(1,0,100);N<-2000
alpha<-0.005;coefficient<-c(1,3);powers<-c(2,4)
x_last<-SGD_min(x,alpha,N,coefficient,powers)
paste("The x corresponding to the function value is",x_last)
#Arima_forecast
# path<-"D:\\Code\\R_HW\\Californa_Wine_Production.xlsx"
start <- 1980
end <- 2020
h<-36
Arima_forecast(start,end,h)
#maxPoints
points<-matrix(c(1,1,2,2,3,3),3,2,byrow = TRUE)
maxPoints(points)
devtools::build_vignettes()
#firstly,let's write the standard Laplace density function
sl<-function(x){
(0.5)*exp(-abs(x))
}
#then it's time to write random walk
rw.Metropolis<-function(sigma,x0,N){
x<-numeric(N)
x[1]<-x0
u<-runif(N)
k<-0
for (i in 2:N) {
y<-rnorm(1,x[i-1],sigma)
if (u[i]<=(sl(y)/sl(x[i-1])))
x[i]<-y else{
x[i]<-x[i-1]
k<-k+1
}
}
return (list(x=x,k=k))
}
#the following codes is to generate several chains of diffirent variance
N<-20000
sigma<-c(.5,2,10,50)
x0<-10
rw1<-rw.Metropolis(sigma[1],x0,N)
rw2<-rw.Metropolis(sigma[2],x0,N)
rw3<-rw.Metropolis(sigma[3],x0,N)
rw4<-rw.Metropolis(sigma[4],x0,N)
#number of candidate points rejected
print(c(rw1$k,rw2$k,rw3$k,rw4$k))
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
.Last.error
devtools::build_vignettes()
vignette <- readRDS("D:/Code/R_HW/StatComp22032/Meta/vignette.rds")
View(vignette)
devtools::document()
devtools::build_vignettes()
#SGD_min
x<-stats::rnorm(1,0,100);N<-2000
alpha<-0.005;coefficient<-c(1,3);powers<-c(2,4)
x_last<-SGD_min(x,alpha,N,coefficient,powers)
paste("The x corresponding to the function value is",x_last)
#Arima_forecast
# path<-"D:\\Code\\R_HW\\Californa_Wine_Production.xlsx"
start <- 1980
end <- 2020
h<-36
Arima_forecast(start,end,h)
#maxPoints
points<-matrix(c(1,1,2,2,3,3),3,2,byrow = TRUE)
maxPoints(points)
library(Rcpp)
cppFunction(code='
int maxPoints(NumericMatrix points) {
int len = points.nrow();
// when the number of points is not enough
if(len < 3) {
return len;
}
int maxNum = 2;
NumericVector maxrecord;
// Traverse every two points
for(double i = 0; i < len - 1; i ++) {
for(double j = i + 1; j < len; j ++) {
// count the Number of equal slopes.
NumericVector record ={i,j};
int count = 2;
double dx = points(i,0) - points(j,0);
double dy = points(i,1) - points(j,1);
// Compare with other points
for(int k = j + 1; k < len; k ++) {
// If the slopes are equal
if(dx * (points(i,1) - points(k,1)) == dy * (points(i,0) - points(k,0))) {
count ++;
record.push_back(k);
}
}
maxrecord=(maxNum>=count)?maxrecord:record;
maxNum = (maxNum>=count)? maxNum: count;
if(maxNum > len / 2) return maxNum;
}
}
// Rprintf("the maxrecord is: ",maxrecord);
return maxNum;
}
')
Arima_forecast <- function(start,end,h,path=0) {
library(StatComp22032)
#Implementing time series forecasting using Auto ARIMA method
# Dataset contains Californa_Wine_Production from 1980 to 2020
# library(readxl)
if (path) {
data<-readxl::read_excel(path)
}
else{
data(data)
}
data<-data['Production']
utils::str(data)
#We do not divide into test and train data.Hence not computing Error  metrics
#This code just shows the implementation of Auto arima in R
#Converting data to time series
# library(stats)
data_ts=stats::ts(data, frequency = 1, start = start,end = end)
data_ts
#Plotting time series
graphics::par(mfrow=c(1,1))
plot(data_ts)
#ACF and PACF of data
graphics::par(mfrow=c(1,3))
stats::plot.ts(data_ts)
stats::acf(data_ts, lag.max=10)
stats::pacf(data_ts, lag.max=10)
# Build time series model using auto.arima
# library(forecast)
model_autoarima= forecast::auto.arima(data_ts,ic='aic')
model_autoarima
#Forecasting using auto arima model
data_forecasts=forecast::forecast(model_autoarima,h=h)
par(mfrow=c(1,1))
plot(data_forecasts)
data_forecasts
}
SGD_min <- function(x,alpha,N,coefficient,powers) {
get_G <- function(x,coefficient,powers) {
gradient<-0
for (i in 1:length(coefficient)) {
gradient<-gradient+coefficient[i]*powers[i]*x^(powers[i]-1)
}
print(gradient)
return (gradient)
}
for (i in 1:N) {
if (! is.na(x)){
x<-x-alpha*get_G(x,coefficient,powers)
}
else{
x<-stats::rnorm(1,0,100)
}
}
print("The minimum function value is")
y<-0
for (i in 1:length(coefficient)) {
y<-y+coefficient[i]*x^powers[i]
}
print(y)
#plot the curve
exp_par <- function(x) {
y<-0
len_par<-length(coefficient)
for (i in 1:len_par) {
y<-y+coefficient[i]*x^powers[i]
}
return (y)
}
graphics::curve(exp_par,-20,20)
return(x)
}
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::install_github("1183038359/StatComp22032",build_vignettes = TRUE, force=T)
